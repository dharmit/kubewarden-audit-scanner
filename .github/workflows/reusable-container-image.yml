name: Reusable container image build
# useful to call from the real workflows

on:
  workflow_call:
    inputs:
      push-image:
        type: boolean
        required: true
      generate-sbom:
        type: boolean
        required: false
        default: true
    outputs:
      repository:
        description: "Repository used to build the container image"
        value: ${{ jobs.build.outputs.repository }}
      tag:
        description: "Tag used to build the container image"
        value: ${{ jobs.build.outputs.tag }}
      artifact:
        description: "Uploaded artifact with the container tarball"
        value: ${{ jobs.build.outputs.artifact }}
      digest:
        description: "Image digest"
        value: ${{ jobs.build.outputs.digest }}

jobs:
  build:
    name: Build container image
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ steps.setoutput.outputs.repository }}
      tag: ${{ steps.setoutput.outputs.tag }}
      artifact: ${{ steps.setoutput.outputs.artifact }}
      digest: ${{ steps.setoutput.outputs.digest }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Install Golang
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4
        with:
          go-version: '1.19'
      -
        name: Install the bom command
        uses: kubewarden/github-actions/kubernetes-bom-installer@d849020c9137340c2373d1cbc9cc571b2b18c17e # v2
      -
        name: Install Cosign
        if: ${{ inputs.generate-sbom == true }}
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3
      -
        name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        run: |
          echo TAG_NAME=latest >> $GITHUB_ENV
      -
        name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
            echo TAG_NAME=$(echo $GITHUB_REF | sed -e "s|refs/tags/||") >> $GITHUB_ENV
      -
        name: Build and push container image
        if: ${{ inputs.push-image }}
        id: build-image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ghcr.io/${{github.repository_owner}}/audit-scanner:${{ env.TAG_NAME }}
      -
        # Only build amd64 because buildx does not allow multiple platforms when
        # exporting the image to a tarball. As we use this only for end-to-end tests
        # and they run on amd64 arch, let's skip the arm64 build for now.
        name: Build linux/amd64 container image
        if: ${{ inputs.push-image == false }}
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/audit-scanner-image-${{ env.TAG_NAME }}.tar
          tags: |
            ghcr.io/${{github.repository_owner}}/audit-scanner:${{ env.TAG_NAME }}
      -
        name: Test container image
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/audit-scanner:${{ env.TAG_NAME }} --help
      -
        name: Create SBOM file
        if: ${{ inputs.generate-sbom == true }}
        shell: bash
        run: |
          bom generate -n https://kubewarden.io/kubewarden.spdx -o audit-scanner.spdx .
      -
        name: Attach SBOM file in the container image
        if: ${{ inputs.generate-sbom == true }}
        shell: bash
        run: |
          set -e
          cosign attach sbom --sbom audit-scanner.spdx "ghcr.io/${{github.repository_owner}}/audit-scanner@${{ steps.build-image.outputs.digest }}"
      -
        name: Upload container image to use in other jobs
        if: ${{ inputs.push-image == false }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
        with:
          name: audit-scanner-image-${{ env.TAG_NAME }}
          path: /tmp/audit-scanner-image-${{ env.TAG_NAME }}.tar
      -
        id: setoutput
        name: Set output parameters
        run: |
          echo "repository=ghcr.io/${{github.repository_owner}}/audit-scanner" >> $GITHUB_OUTPUT
          echo "tag=${{ env.TAG_NAME }}" >> $GITHUB_OUTPUT
          echo "artifact=audit-scanner-image-${{env.TAG_NAME}}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build-image.outputs.digest }}" >> $GITHUB_OUTPUT
